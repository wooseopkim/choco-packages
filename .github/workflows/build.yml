on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          global-json-file: ./global.json
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - run: dotnet restore --locked-mode
      - run: dotnet format --no-restore --verify-no-changes
      - run: dotnet build --no-restore --configuration Release
      - run: dotnet test --no-restore
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.output.outputs.matrix }}
    steps:
      - run: |
          cat <<-EOF | jq add -s -c >> tmp.jsonl
            {"id": "android-commandlinetools"}
            {"project": "AndroidCommandLineTools/Main"}
            {"artifact": "AndroidCommandLineTools/Main/Releases"}
            {"verify-install": "where.exe sdkmanager && where.exe avdmanager"}
            {"verify-uninstall": "where.exe sdkmanager && exit 1 || exit 0"}
          EOF
      - id: output
        run: echo "matrix=$(cat tmp.jsonl | jq -s -c)" >> "$GITHUB_OUTPUT"
  generate:
    needs: [setup, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          global-json-file: ./global.json
          cache: true
          cache-dependency-path: '**/packages.lock.json'
      - run: dotnet run --project "$PROJECT"
        env:
          PROJECT: ${{ matrix.project }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.id }}-package
          path: ${{ matrix.artifact }}
  package:
    needs: [setup, generate]
    runs-on: windows-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.id }}-package
      - run: choco pack "./$ID.nuspec"
        env:
          ID: ${{ matrix.id }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.id }}-nupkg
          path: ./*.nupkg
  check:
    needs: [setup, package]
    runs-on: windows-latest
    strategy:
      matrix:
        include: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.id }}-nupkg

      - uses: actions/cache@v4
        with:
          path: .choco-cache
          key: ${{ matrix.id }}-choco-${{ hashFiles('./*.nupkg') }}
      - run: choco install "$ID" --source=. -y --failonstderr --cache="$CACHE"
        env:
          ID: ${{ matrix.id }}
          CACHE: .choco-cache
      - run: ${{ matrix.verify-install }}

      - run: choco uninstall "$ID" -y --failonstderr
        env:
          ID: ${{ matrix.id }}
      - run: ${{ matrix.verify-uninstall }}
