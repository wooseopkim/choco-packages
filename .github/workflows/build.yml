on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: 0 0 1 * *

jobs:
  setup:
    runs-on: windows-latest
    outputs:
      matrix: ${{ steps.output.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: output
        run: |
          $targets = (Import-PowerShellDataFile (Join-Path '.' 'Build.psd1')).Targets
          $matrix = .\.github\workflows\scripts\ConvertTo-Matrix.ps1 -Targets $targets
          Write-Output "matrix=$matrix" >> $env:GITHUB_OUTPUT
  build:
    needs: [setup]
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    outputs:
      uploaded: ${{ steps.upload.outputs.artifact-id == true }}
    permissions:
      contents: read
      packages: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          global-json-file: ./global.json
      - name: Add GitHub Packages as the default source
        run: |
          $source = "https://nuget.pkg.github.com/$env:NAMESPACE/"
          choco source add --source "$source" --user "$env:NAMESPACE" --password "$env:API_KEY" --priority 1 -y -failonstderr
        env:
          API_KEY: ${{ secrets.GITHUB_TOKEN }}
          NAMESPACE: ${{ github.repository_owner }}

      - run: |
          while ($count++ -Ne 3) {
            try { .\install.ps1; break }
            catch { Start-Sleep (10 * $count) }
          }
      - run: .\load.ps1
      - run: .\test.ps1
      - run: .\build.ps1 -Target "$env:ID"
        env:
          ID: ${{ matrix.id }}

      - id: upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.id }}
          path: ./main/release/${{ matrix.id }}*.nupkg
  check:
    needs: [setup, build]
    if: needs.build.outputs.uploaded
    runs-on: windows-latest
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.id }}

      - id: prepare
        run: |
          $fileName = (Get-ChildItem -Path '*.nupkg')[0].Name
          $cacheKey = "$env:ID-choco-$fileName"
          Write-Output "cache-key=$cacheKey" >> $env:GITHUB_OUTPUT
          Write-Output 'cache-path=.choco-cache' >> $env:GITHUB_OUTPUT
        env:
          ID: ${{ matrix.id }}
      - uses: actions/cache@v4
        with:
          path: ${{ steps.prepare.outputs.cache-path }}
          key: ${{ steps.prepare.outputs.cache-key }}
      - run: choco install "$env:ID" --source=. -y --failonstderr --cache="$env:CACHE"
        env:
          ID: ${{ matrix.id }}
          CACHE: ${{ steps.prepare.outputs.cache-path }}
      - run: |
          $commands = ConvertFrom-Json "$env:COMMAND_LIST"
          .\.github\workflows\scripts\Test-ChocoCommand.ps1 -Commands $commands
        env:
          COMMAND_LIST: ${{ toJson(matrix.commands) }}

      - run: choco uninstall "$env:ID" -y --failonstderr
        env:
          ID: ${{ matrix.id }}
      - run: |
          $commands = ConvertFrom-Json "$env:COMMAND_LIST"
          .\.github\workflows\scripts\Test-ChocoCommand.ps1 -NotCallable -Commands $commands
        env:
          COMMAND_LIST: ${{ toJson(matrix.commands) }}
  deploy:
    if: github.ref == 'refs/heads/main'
    needs: [setup, check]
    runs-on: windows-latest
    permissions:
      packages: write
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.id }}
      - name: Publish to GitHub Packages
        run: |
          choco push --source "'https://nuget.pkg.github.com/$env:NAMESPACE/'" --apikey "$env:API_KEY" -y -failonstderr
        env:
          API_KEY: ${{ secrets.GITHUB_TOKEN }}
          NAMESPACE: ${{ github.repository_owner }}
